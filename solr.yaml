# nb -v run driver=stdout/cql yaml=solr tags=phase:schema host=localhost
scenarios:
  default:
    - run driver=cql tags==phase:schema threads==1 cycles==UNDEF
    - run driver=cql tags==phase:rampup cycles===TEMPLATE(rampup-cycles,10000000) threads=auto
    - run driver=cql tags==phase:read cycles===TEMPLATE(main-cycles,10000000) threads=auto
bindings:
  ALPHAID: Mod(25000); AlphaNumericString(<<key_length:12>>);
  DATE: StartingEpochMillis('2020-01-01 00:00:00'); AddHashRange(0,1000000000L);
  OLD: StartingEpochMillis('2010-01-01 00:00:00'); AddHashRange(0,10000000000L); EpochMillisToCqlLocalDate();
  STRING: HashedLineToString('data/variable_words.txt');
  LOREM_PART: HashedFileExtractToString('data/lorem_ipsum_full.txt',20,50)
blocks:
  - tags:
      phase: schema
    params:
      prepared: false
    statements:
      - create-keyspace: |
          CREATE KEYSPACE IF NOT EXISTS <<keyspace:test>>
          WITH replication = {'class': 'NetworkTopologyStrategy', 'Solr':'<<rf:3>>'}
          AND durable_writes = true;
        tags:
          name: create-keyspace
      - create-table : |
          CREATE TABLE IF NOT EXISTS <<keyspace:test>>.<<table:nbsolr>> (
              id text,
              ts timeuuid,
              created date,
              tags text,
              others text,
              PRIMARY KEY ((id, ts))
          );
        tags:
          name: create-table
  - tags:
      phase: rampup
      type: write
    params:
      cl: <<write_cl:LOCAL_QUORUM>>
    statements:
      - insert-rampup: |
          INSERT INTO <<keyspace:test>>.<<table:nbsolr>> (id, ts, created, tags, others)
          VALUES ({ALPHAID}, {DATE}, {OLD}, {STRING}, {LOREM_PART});
        idempotent: true
        tags:
          name: insert-rampup
  - tags:
      phase: main
      type: read
    params:
      #nb of exec per cycle
      ratio: 1
      cl: LOCAL_ONE
      prepared: false
      raw: true
    # One of these per ratio
    # A minimal pattern will be computed by taking each row of statements and multiply per ratio.
    # With n statements and ratio r it will produce a r*n-statements pattern. nb will (int) divide
    # provided cycles by r*n to determine nb of patterns to execute.
    # cycles=10 will produces 6 queries with ratio 2, and 9 with ratio 1
    statements:
      - main-select: |
          SELECT COUNT(*) FROM <<keyspace:test>>.<<table:nbsolr>>
          WHERE
          solr_query='created:{DATE} AND tags:{STRING}';
        tags:
          name: solr-created-tags
      - main-id: |
          SELECT COUNT(*) FROM <<keyspace:test>>.<<table:nbsolr>>
          WHERE
          solr_query='id:{ALPHAID}'
        tags:
          name: solr-id
      - main-id: |
          SELECT COUNT(*) FROM <<keyspace:test>>>.<<table:nbsolr>>
          WHERE
          solr_query='ts:[{DATE} TO NOW]';
  - tags:
      phase: main
      type: write
    params:
      ratio: 1
      cl: <<write_cl:LOCAL_QUORUM>>
    statements:
      - insert-main: |
          INSERT INTO <<keyspace:test>>.<<table:nbsolr>> (id, created, tags, others)
          VALUES ({ALPHAID}, {DATE}, {STRING}, {LOREM_PART});
        idempotent: true
        tags:
          name: insert-main
  # - tags:
  #     phase: main
  #     type: delete
  #   params:
  #     ratio: <<delete_ratio:1>>
  #     cl: <<delete_cl:LOCAL_QUORUM>>
  #   statements:
  #     - delete-main: |
  #         DELETE FROM  <<keyspace:bench>>.<<table:mouvements_valides>>
  #         WHERE "I_UNIQ_CPT"={I_UNIQ_CPT} AND "D_OPERT"={D_OPERT} AND "I_MVT"={I_MVT}
  #       idempotent: true
  #       tags:
  #         name: delete-main
